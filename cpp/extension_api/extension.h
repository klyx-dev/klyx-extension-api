// Generated by `wit-bindgen` 0.43.0. DO NOT EDIT!
#ifndef __BINDINGS_EXTENSION_H
#define __BINDINGS_EXTENSION_H
#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

typedef struct extension_string_t {
  uint8_t*ptr;
  size_t len;
} extension_string_t;

typedef uint8_t klyx_extension_system_toast_duration_t;

#define KLYX_EXTENSION_SYSTEM_TOAST_DURATION_SHORT 0
#define KLYX_EXTENSION_SYSTEM_TOAST_DURATION_LONG 1

// A (half-open) range (`[start, end)`).
typedef struct klyx_extension_common_range_t {
  // The start of the range (inclusive).
  uint32_t   start;
  // The end of the range (exclusive).
  uint32_t   end;
} klyx_extension_common_range_t;

typedef struct {
  extension_string_t f0;
  extension_string_t f1;
} extension_tuple2_string_string_t;

// A list of environment variables.
typedef struct klyx_extension_common_env_vars_t {
  extension_tuple2_string_string_t   *ptr;
  size_t len;
} klyx_extension_common_env_vars_t;

typedef klyx_extension_common_env_vars_t klyx_extension_process_env_vars_t;

typedef struct {
  extension_string_t *ptr;
  size_t len;
} extension_list_string_t;

// A command.
typedef struct klyx_extension_process_command_t {
  // The command to execute.
  extension_string_t   command;
  // The arguments to pass to the command.
  extension_list_string_t   args;
  // The environment variables to set for the command.
  klyx_extension_process_env_vars_t   env;
} klyx_extension_process_command_t;

typedef struct {
  bool is_some;
  int32_t val;
} extension_option_s32_t;

typedef struct {
  uint8_t *ptr;
  size_t len;
} extension_list_u8_t;

// The output of a finished process.
typedef struct klyx_extension_process_output_t {
  // The status (exit code) of the process.
  // 
  // On Unix, this will be `None` if the process was terminated by a signal.
  extension_option_s32_t   status;
  // The data that the process wrote to stdout.
  extension_list_u8_t   stdout;
  // The data that the process wrote to stderr.
  extension_list_u8_t   stderr;
} klyx_extension_process_output_t;

typedef struct {
  bool is_err;
  union {
    klyx_extension_process_output_t ok;
    extension_string_t err;
  } val;
} klyx_extension_process_result_output_string_t;

// The kind of an LSP completion.
typedef struct klyx_extension_lsp_completion_kind_t {
  uint8_t tag;
  union {
    int32_t     other;
  } val;
} klyx_extension_lsp_completion_kind_t;

#define KLYX_EXTENSION_LSP_COMPLETION_KIND_TEXT 0
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_METHOD 1
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_FUNCTION 2
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_CONSTRUCTOR 3
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_FIELD 4
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_VARIABLE 5
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_CLASS 6
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_INTERFACE 7
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_MODULE 8
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_PROPERTY 9
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_UNIT 10
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_VALUE 11
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_ENUM 12
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_KEYWORD 13
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_SNIPPET 14
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_COLOR 15
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_FILE 16
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_REFERENCE 17
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_FOLDER 18
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_ENUM_MEMBER 19
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_CONSTANT 20
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_STRUCT 21
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_EVENT 22
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_OPERATOR 23
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_TYPE_PARAMETER 24
#define KLYX_EXTENSION_LSP_COMPLETION_KIND_OTHER 25

typedef struct {
  bool is_some;
  extension_string_t val;
} extension_option_string_t;

// Label details for an LSP completion.
typedef struct klyx_extension_lsp_completion_label_details_t {
  extension_option_string_t   detail;
  extension_option_string_t   description;
} klyx_extension_lsp_completion_label_details_t;

// Defines how to interpret the insert text in a completion item.
typedef struct klyx_extension_lsp_insert_text_format_t {
  uint8_t tag;
  union {
    int32_t     other;
  } val;
} klyx_extension_lsp_insert_text_format_t;

#define KLYX_EXTENSION_LSP_INSERT_TEXT_FORMAT_PLAIN_TEXT 0
#define KLYX_EXTENSION_LSP_INSERT_TEXT_FORMAT_SNIPPET 1
#define KLYX_EXTENSION_LSP_INSERT_TEXT_FORMAT_OTHER 2

typedef struct {
  bool is_some;
  klyx_extension_lsp_completion_label_details_t val;
} klyx_extension_lsp_option_completion_label_details_t;

typedef struct {
  bool is_some;
  klyx_extension_lsp_completion_kind_t val;
} klyx_extension_lsp_option_completion_kind_t;

typedef struct {
  bool is_some;
  klyx_extension_lsp_insert_text_format_t val;
} klyx_extension_lsp_option_insert_text_format_t;

// An LSP completion.
typedef struct klyx_extension_lsp_completion_t {
  extension_string_t   label;
  klyx_extension_lsp_option_completion_label_details_t   label_details;
  extension_option_string_t   detail;
  klyx_extension_lsp_option_completion_kind_t   kind;
  klyx_extension_lsp_option_insert_text_format_t   insert_text_format;
} klyx_extension_lsp_completion_t;

// The kind of an LSP symbol.
typedef struct klyx_extension_lsp_symbol_kind_t {
  uint8_t tag;
  union {
    int32_t     other;
  } val;
} klyx_extension_lsp_symbol_kind_t;

#define KLYX_EXTENSION_LSP_SYMBOL_KIND_FILE 0
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_MODULE 1
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_NAMESPACE 2
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_PACKAGE 3
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_CLASS 4
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_METHOD 5
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_PROPERTY 6
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_FIELD 7
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_CONSTRUCTOR 8
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_ENUM 9
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_INTERFACE 10
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_FUNCTION 11
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_VARIABLE 12
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_CONSTANT 13
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_STRING 14
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_NUMBER 15
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_BOOLEAN 16
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_ARRAY 17
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_OBJECT 18
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_KEY 19
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_NULL 20
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_ENUM_MEMBER 21
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_STRUCT 22
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_EVENT 23
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_OPERATOR 24
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_TYPE_PARAMETER 25
#define KLYX_EXTENSION_LSP_SYMBOL_KIND_OTHER 26

// An LSP symbol.
typedef struct klyx_extension_lsp_symbol_t {
  klyx_extension_lsp_symbol_kind_t   kind;
  extension_string_t   name;
} klyx_extension_lsp_symbol_t;

typedef klyx_extension_common_env_vars_t extension_env_vars_t;

typedef klyx_extension_common_range_t extension_range_t;

typedef klyx_extension_lsp_completion_t extension_completion_t;

typedef klyx_extension_lsp_symbol_t extension_symbol_t;

typedef klyx_extension_process_command_t extension_command_t;

// The installation status for a language server.
typedef struct extension_language_server_installation_status_t {
  uint8_t tag;
  union {
    extension_string_t     failed;
  } val;
} extension_language_server_installation_status_t;

// The language server has no installation status.
#define EXTENSION_LANGUAGE_SERVER_INSTALLATION_STATUS_NONE 0
// The language server is being downloaded.
#define EXTENSION_LANGUAGE_SERVER_INSTALLATION_STATUS_DOWNLOADING 1
// The language server is checking for updates.
#define EXTENSION_LANGUAGE_SERVER_INSTALLATION_STATUS_CHECKING_FOR_UPDATE 2
// The language server installation failed for specified reason.
#define EXTENSION_LANGUAGE_SERVER_INSTALLATION_STATUS_FAILED 3

typedef struct extension_settings_location_t {
  uint64_t   worktree_id;
  extension_string_t   path;
} extension_settings_location_t;

typedef struct extension_own_worktree_t {
  int32_t __handle;
} extension_own_worktree_t;

typedef struct extension_borrow_worktree_t {
  int32_t __handle;
} extension_borrow_worktree_t;

typedef struct extension_own_project_t {
  int32_t __handle;
} extension_own_project_t;

typedef struct extension_borrow_project_t {
  int32_t __handle;
} extension_borrow_project_t;

typedef struct extension_own_key_value_store_t {
  int32_t __handle;
} extension_own_key_value_store_t;

typedef struct extension_borrow_key_value_store_t {
  int32_t __handle;
} extension_borrow_key_value_store_t;

// A span containing a code literal.
typedef struct extension_code_label_span_literal_t {
  // The literal text.
  extension_string_t   text;
  // The name of the highlight to use for this literal.
  extension_option_string_t   highlight_name;
} extension_code_label_span_literal_t;

// A span within a code label.
typedef struct extension_code_label_span_t {
  uint8_t tag;
  union {
    extension_range_t     code_range;
    extension_code_label_span_literal_t     literal;
  } val;
} extension_code_label_span_t;

// A range into the parsed code.
#define EXTENSION_CODE_LABEL_SPAN_CODE_RANGE 0
// A span containing a code literal.
#define EXTENSION_CODE_LABEL_SPAN_LITERAL 1

typedef struct {
  extension_code_label_span_t *ptr;
  size_t len;
} extension_list_code_label_span_t;

// A label containing some code.
typedef struct extension_code_label_t {
  // The source code to parse with Tree-sitter.
  extension_string_t   code;
  // The spans to display in the label.
  extension_list_code_label_span_t   spans;
  // The range of the displayed label to include when filtering.
  extension_range_t   filter_range;
} extension_code_label_t;

typedef struct {
  bool is_err;
  union {
    extension_string_t err;
  } val;
} extension_result_void_string_t;

typedef struct {
  bool is_some;
  extension_settings_location_t val;
} extension_option_settings_location_t;

typedef struct {
  bool is_err;
  union {
    extension_string_t ok;
    extension_string_t err;
  } val;
} extension_result_string_string_t;

typedef struct {
  uint64_t *ptr;
  size_t len;
} extension_list_u64_t;

typedef struct {
  bool is_err;
  union {
    extension_command_t ok;
    extension_string_t err;
  } val;
} extension_result_command_string_t;

typedef struct {
  bool is_err;
  union {
    extension_option_string_t ok;
    extension_string_t err;
  } val;
} extension_result_option_string_string_t;

typedef struct {
  extension_completion_t *ptr;
  size_t len;
} extension_list_completion_t;

typedef struct {
  bool is_some;
  extension_code_label_t val;
} extension_option_code_label_t;

typedef struct {
  extension_option_code_label_t *ptr;
  size_t len;
} extension_list_option_code_label_t;

typedef struct {
  bool is_err;
  union {
    extension_list_option_code_label_t ok;
    extension_string_t err;
  } val;
} extension_result_list_option_code_label_string_t;

typedef struct {
  extension_symbol_t *ptr;
  size_t len;
} extension_list_symbol_t;

// Imported Functions from `klyx:extension/system`
extern void klyx_extension_system_show_toast(extension_string_t *message, klyx_extension_system_toast_duration_t duration);

// Imported Functions from `klyx:extension/process`
// Executes the given command as a child process, waiting for it to finish
// and collecting all of its output.
extern bool klyx_extension_process_run_command(klyx_extension_process_command_t *command, klyx_extension_process_output_t *ret, extension_string_t *err);

// Imported Functions from `extension`
// Downloads a file from the given URL and saves it to the given path within the extension's
// working directory.
extern bool extension_download_file(extension_string_t *url, extension_string_t *file_path, extension_string_t *err);
extern bool extension_get_settings(extension_settings_location_t *maybe_path, extension_string_t *category, extension_string_t *maybe_key, extension_string_t *ret, extension_string_t *err);
// Makes the file at the given path executable.
extern bool extension_make_file_executable(extension_string_t *filepath, extension_string_t *err);
// Updates the installation status for the given language server.
extern void extension_set_language_server_installation_status(extension_string_t *language_server_name, extension_language_server_installation_status_t *status);
// Returns the ID of the worktree.
extern uint64_t extension_method_worktree_id(extension_borrow_worktree_t self);
// Returns the root path of the worktree.
extern void extension_method_worktree_root_path(extension_borrow_worktree_t self, extension_string_t *ret);
// Returns the textual contents of the specified file in the worktree.
extern bool extension_method_worktree_read_text_file(extension_borrow_worktree_t self, extension_string_t *path, extension_string_t *ret, extension_string_t *err);
// Returns the path to the given binary name, if one is present on the `$PATH`.
extern bool extension_method_worktree_which(extension_borrow_worktree_t self, extension_string_t *binary_name, extension_string_t *ret);
// Returns the current shell environment.
extern void extension_method_worktree_shell_env(extension_borrow_worktree_t self, extension_env_vars_t *ret);
// Returns the IDs of all of the worktrees in this project.
extern void extension_method_project_worktree_ids(extension_borrow_project_t self, extension_list_u64_t *ret);
// Inserts an entry under the specified key.
extern bool extension_method_key_value_store_insert(extension_borrow_key_value_store_t self, extension_string_t *key, extension_string_t *value, extension_string_t *err);

// Exported Functions from `extension`
void exports_extension_init_extension(void);
void exports_extension_uninstall(void);
bool exports_extension_language_server_command(extension_string_t *language_server_id, extension_borrow_worktree_t worktree, extension_command_t *ret, extension_string_t *err);
bool exports_extension_language_server_initialization_options(extension_string_t *language_server_id, extension_borrow_worktree_t worktree, extension_option_string_t *ret, extension_string_t *err);
bool exports_extension_language_server_workspace_configuration(extension_string_t *language_server_id, extension_borrow_worktree_t worktree, extension_option_string_t *ret, extension_string_t *err);
bool exports_extension_language_server_additional_initialization_options(extension_string_t *language_server_id, extension_string_t *target_language_server_id, extension_borrow_worktree_t worktree, extension_option_string_t *ret, extension_string_t *err);
bool exports_extension_language_server_additional_workspace_configuration(extension_string_t *language_server_id, extension_string_t *target_language_server_id, extension_borrow_worktree_t worktree, extension_option_string_t *ret, extension_string_t *err);
bool exports_extension_labels_for_completions(extension_string_t *language_server_id, extension_list_completion_t *completions, extension_list_option_code_label_t *ret, extension_string_t *err);
bool exports_extension_labels_for_symbols(extension_string_t *language_server_id, extension_list_symbol_t *symbols, extension_list_option_code_label_t *ret, extension_string_t *err);

// Helper Functions

void extension_tuple2_string_string_free(extension_tuple2_string_string_t *ptr);

void klyx_extension_common_env_vars_free(klyx_extension_common_env_vars_t *ptr);

void klyx_extension_process_env_vars_free(klyx_extension_process_env_vars_t *ptr);

void extension_list_string_free(extension_list_string_t *ptr);

void klyx_extension_process_command_free(klyx_extension_process_command_t *ptr);

void extension_option_s32_free(extension_option_s32_t *ptr);

void extension_list_u8_free(extension_list_u8_t *ptr);

void klyx_extension_process_output_free(klyx_extension_process_output_t *ptr);

void klyx_extension_process_result_output_string_free(klyx_extension_process_result_output_string_t *ptr);

void klyx_extension_lsp_completion_kind_free(klyx_extension_lsp_completion_kind_t *ptr);

void extension_option_string_free(extension_option_string_t *ptr);

void klyx_extension_lsp_completion_label_details_free(klyx_extension_lsp_completion_label_details_t *ptr);

void klyx_extension_lsp_insert_text_format_free(klyx_extension_lsp_insert_text_format_t *ptr);

void klyx_extension_lsp_option_completion_label_details_free(klyx_extension_lsp_option_completion_label_details_t *ptr);

void klyx_extension_lsp_option_completion_kind_free(klyx_extension_lsp_option_completion_kind_t *ptr);

void klyx_extension_lsp_option_insert_text_format_free(klyx_extension_lsp_option_insert_text_format_t *ptr);

void klyx_extension_lsp_completion_free(klyx_extension_lsp_completion_t *ptr);

void klyx_extension_lsp_symbol_kind_free(klyx_extension_lsp_symbol_kind_t *ptr);

void klyx_extension_lsp_symbol_free(klyx_extension_lsp_symbol_t *ptr);

void extension_env_vars_free(extension_env_vars_t *ptr);

void extension_completion_free(extension_completion_t *ptr);

void extension_symbol_free(extension_symbol_t *ptr);

void extension_command_free(extension_command_t *ptr);

void extension_language_server_installation_status_free(extension_language_server_installation_status_t *ptr);

void extension_settings_location_free(extension_settings_location_t *ptr);

extern void extension_worktree_drop_own(extension_own_worktree_t handle);

extern void extension_worktree_drop_borrow(extension_borrow_worktree_t handle);

extern extension_borrow_worktree_t extension_borrow_worktree(extension_own_worktree_t handle);

extern void extension_project_drop_own(extension_own_project_t handle);

extern void extension_project_drop_borrow(extension_borrow_project_t handle);

extern extension_borrow_project_t extension_borrow_project(extension_own_project_t handle);

extern void extension_key_value_store_drop_own(extension_own_key_value_store_t handle);

extern void extension_key_value_store_drop_borrow(extension_borrow_key_value_store_t handle);

extern extension_borrow_key_value_store_t extension_borrow_key_value_store(extension_own_key_value_store_t handle);

void extension_code_label_span_literal_free(extension_code_label_span_literal_t *ptr);

void extension_code_label_span_free(extension_code_label_span_t *ptr);

void extension_list_code_label_span_free(extension_list_code_label_span_t *ptr);

void extension_code_label_free(extension_code_label_t *ptr);

void extension_result_void_string_free(extension_result_void_string_t *ptr);

void extension_option_settings_location_free(extension_option_settings_location_t *ptr);

void extension_result_string_string_free(extension_result_string_string_t *ptr);

void extension_list_u64_free(extension_list_u64_t *ptr);

void extension_result_command_string_free(extension_result_command_string_t *ptr);

void extension_result_option_string_string_free(extension_result_option_string_string_t *ptr);

void extension_list_completion_free(extension_list_completion_t *ptr);

void extension_option_code_label_free(extension_option_code_label_t *ptr);

void extension_list_option_code_label_free(extension_list_option_code_label_t *ptr);

void extension_result_list_option_code_label_string_free(extension_result_list_option_code_label_string_t *ptr);

void extension_list_symbol_free(extension_list_symbol_t *ptr);

// Sets the string `ret` to reference the input string `s` without copying it
void extension_string_set(extension_string_t *ret, const char*s);

// Creates a copy of the input nul-terminated string `s` and
// stores it into the component model string `ret`.
void extension_string_dup(extension_string_t *ret, const char*s);

// Deallocates the string pointed to by `ret`, deallocating
// the memory behind the string.
void extension_string_free(extension_string_t *ret);

#ifdef __cplusplus
}
#endif
#endif
